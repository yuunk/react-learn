{"version":3,"sources":["components/Header/Header.js","components/InputTweet/InputTweet.js","components/TweetList/Tweet/Tweet.js","components/TweetList/TweetList.js","page/Home/Home.js","page/Signup/Signup.js","App.js","serviceWorker.js","index.js"],"names":["header","className","to","InputTweet","clickedTweet","console","log","textareaInput","value","alert","props","click","ref","input","type","name","onClick","this","Component","Tweet","user","title","text","TweetList","state","tweetList","componentDidMount","fetchTweetList","axios","get","then","response","setState","data","catch","update","map","tweet","index","key","user_id","addTweet","add","push","resetAdd","Home","tweetText","Signup","action","method","App","Header","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5d14a39a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\n// import './Header.scss';\n\nconst header = () => {\n  return (\n    <header className=\"Header\">\n      <Link\n        to=\"/\"\n      >Home</Link>\n      <Link\n        to=\"/signup\"\n      >signup</Link>\n    </header>\n  );\n}\n\nexport default header;\n","import React, { Component } from 'react';\n\nimport './InputTweet.scss';\n\n\nclass InputTweet extends Component {\n\n    clickedTweet = () => {\n        console.log('clicked');\n        if (this.textareaInput.value === '') {\n            alert('empty');\n        } else {\n            this.props.click(this.textareaInput.value);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"InputTweet\">\n                <textarea\n                    ref={input => { this.textareaInput = input }}\n                    className=\"InputTweet__textArea\"\n                    type=\"text\"\n                    name=\"tweet\"\n                />\n                <button\n                    onClick={this.clickedTweet}\n                    className=\"InputTweet__button\"\n                    type=\"button\"\n                >\n                    Tweet\n            </button>\n            </div>\n        );\n    }\n}\n\nexport default InputTweet;","import React, { Component } from 'react';\nimport './Tweet.scss';\n\nclass Tweet extends Component {\n\n    render() {\n        return (\n            <li className=\"Tweet\">\n                <div className=\"Tweet__icon\">icon</div>\n                <div className=\"Tweet__containerLeft\">\n                    <div>{this.props.user}</div>\n                    <div>{this.props.title}</div>\n                    <div>{this.props.text}</div>\n                    <button>â™¡</button>\n                </div>\n            </li>\n        )\n    }\n\n}\n\nexport default Tweet;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Tweet from './Tweet/Tweet';\n\nimport './TweetList.scss';\n\nclass TweetList extends Component {\n\n  state = {\n    tweetList: [],\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.addTweet.add) {\n      const tweetList = [...state.tweetList];\n      tweetList.push({ user: props.addTweet.user, text: props.addTweet.text });\n      props.resetAdd();\n      console.log('add');\n      return {\n        tweetList: tweetList\n      };\n    } else {\n      return state;\n    }\n  }\n\n  fetchTweetList() {\n    axios\n      .get('/api/tweet')\n      .then(response => {\n        this.setState({ tweetList: response.data });\n      })\n      .catch(() => {\n        console.log('axios faild');\n      });\n  }\n\n  componentDidMount = () => {\n    console.log('didmout');\n    this.fetchTweetList();\n  }\n\n  \n  render() {\n\n    console.log('update id = ' + this.state.update);\n\n    return (\n      <ul className=\"TweetList\">\n        {this.state.tweetList.map((tweet, index) => {\n          return (\n            <Tweet\n              key={index}\n              user={tweet.user_id}\n              title={tweet.title}\n              text={tweet.text}\n            />\n          )\n        })}\n      </ul>\n    )\n  }\n\n}\n\nexport default TweetList;\n","import React, { Component } from 'react';\n// import './Home.scss';\n\nimport InputTweet from '../../components/InputTweet/InputTweet';\nimport TweetList from '../../components/TweetList/TweetList';\n\nclass Home extends Component {\n\n    state = {\n        tweet: {\n            add: false,\n            user: '',\n            text: ''\n        }\n    }\n\n    addTweet = (tweetText) => {\n        console.log(tweetText);\n        this.setState({\n            tweet: {\n                add: true,\n                user: 'testUser',\n                text: tweetText\n            }\n        });\n    }\n\n    resetAdd = () => {\n        this.setState({\n            tweet: {\n                add: false,\n                user: '',\n                text: ''\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"PageHome\">\n                <InputTweet click={(tweetText) => this.addTweet(tweetText)} />\n                <TweetList addTweet={this.state.tweet} resetAdd={this.resetAdd} />\n            </div>\n        )\n    }\n\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nimport './Signup.scss';\nimport './SignupForm.scss';\n\nclass Signup extends Component {\n\n  render() {\n    return (\n      <div className=\"Signup\">\n        <h2 className=\"Signup__ttl\">Sign Up</h2>\n\n        <form action=\"/api/singup\" method=\"post\" className=\"SignupForm\" name=\"signupForm\">\n          <div className=\"SignupForm__row\">\n            <label className=\"SignupForm__label\">email</label>\n            <input type=\"email\" name=\"email\" />\n          </div>\n          <div className=\"SignupForm__row\">\n            <label className=\"SignupForm__label\">user-name</label>\n            <input type=\"text\" name=\"name\" />\n          </div>\n          <div className=\"SignupForm__row\">\n            <label className=\"SignupForm__label\">password</label>\n            <input type=\"password\" name=\"password\" />\n          </div>\n          <div className=\"SignupForm__row\">\n            <button className=\"SignupForm__button\">submit</button>\n          </div>\n        </form>\n        \n      </div>\n    )\n  }\n\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.scss';\n\nimport Header from './components/Header/Header';\n\n// page\nimport Home from './page/Home/Home';\nimport Signup from './page/Signup/Signup';\n\nclass App extends Component {\n\n\n\n  render() {\n    return (\n\n      <BrowserRouter>\n        <div>\n          <Header />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/signup' component={Signup} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}